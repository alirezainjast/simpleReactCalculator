{"version":3,"sources":["components/Display.js","components/DigitButton.js","components/OperationButton.js","components/Pad.js","components/Calculator.js","App.js","serviceWorker.js","Counter.js","index.js"],"names":["connect","state","display","className","type","value","disabled","DigitButton","digit","digitClickHandler","onClick","OperationButton","operation","operatoinClickHandler","Pad","e","props","addToDisplay","operaton","clear","clear2","darsad","result","sum","minus","multiply","divide","keyHandler","key","keyHandler2","document","addEventListener","this","Component","dispatch","payload","Calculator","App","href","Boolean","window","location","hostname","match","initState","tmpNum","Counter","tmpState","parseFloat","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.12816aa9.chunk.js","sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\n\nfunction Display( {display} ) {\n    return (\n        <div className=\"dislpay\">\n            {/* use input as display */}\n            <input type=\"text\" value={display} disabled={true}/>\n        </div>\n    )\n}\n\n// subscribe to store to read data\nconst mapStateToProps = (state) =>{\n    return{\n        display: state.display,\n    }\n}\n\nexport default connect(mapStateToProps)(Display)","import React from 'react'\n\nconst DigitButton = ({ digit, digitClickHandler }) =>{\n    return (\n        <div className=\"digitButton\">\n            <button onClick={() => {digitClickHandler({digit})}}>{digit}</button>\n        </div>\n    )\n}\n\nexport default DigitButton","import React from 'react'\n\nconst OperationButton = ({ operation, operatoinClickHandler }) =>{\n    return (\n        <div className=\"operationButton\">\n            <button onClick={() => {operatoinClickHandler({operation})}}>{operation}</button>\n        </div>\n    )\n}\n\nexport default OperationButton","import React, { Component } from 'react'\nimport DigitButton from './DigitButton'\nimport OperationButton from './OperationButton'\nimport { connect } from 'react-redux'\n\nclass Pad extends Component {\n\n    // handle click events\n    digitClickHandler = (e) =>{\n        const digit = e.digit\n        this.props.addToDisplay(digit)\n    }\n    operatoinClickHandler = (e) =>{\n        let operaton = e.operation;\n        if(operaton === \"C\") this.props.clear()\n        if(operaton === \"CE\") this.props.clear2()\n        if(operaton === \"%\") this.props.darsad()\n        if(operaton === \"=\") this.props.result()\n        if(operaton === \"+\") this.props.sum(operaton)\n        if(operaton === \"-\") this.props.minus(operaton)\n        if(operaton === \"X\") this.props.multiply(operaton)\n        if(operaton === \"/\") this.props.divide(operaton)\n    }\n\n    // handle keybord events\n    keyHandler = (e) =>{\n        if((e.key >= 0 && e.key <= 9) || e.key === '.' ) this.props.addToDisplay(e.key)\n        else{\n            let operaton = e.key;\n            if(operaton === \"Backspace\") this.props.clear2()\n            if(operaton === \"%\") this.props.darsad()\n            if(operaton === \"+\") this.props.sum(operaton)\n            if(operaton === \"-\") this.props.minus(operaton)\n            if(operaton === \"*\") this.props.multiply(operaton)\n            if(operaton === \"/\") this.props.divide(operaton)\n        }\n    }\n\n    keyHandler2 = (e) =>{\n        let operaton = e.key;\n        if(operaton === \"Escape\") this.props.clear()\n        if(operaton === \"Enter\") this.props.result()\n    }\n    componentDidMount(){\n        document.addEventListener('keydown', this.keyHandler);\n        document.addEventListener('keypress', this.keyHandler2);\n    }\n    \n    \n    render(){\n    return (\n        // this is our pad\n        // made with 2 type of button(digit and operation)\n        <div className=\"pad\">\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"C\"}/>\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"CE\"}/>\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"%\"}/>\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"/\"}/>\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"7\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"8\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"9\"} />\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"X\"}/>\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"4\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"5\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"6\"} />\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"-\"}/>\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"1\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"2\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"3\"} />\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"+\"}/>\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"0\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\"00\"} />\n            <DigitButton digitClickHandler={this.digitClickHandler} digit={\".\"} />\n            <OperationButton operatoinClickHandler={this.operatoinClickHandler} operation={\"=\"}/>\n        </div>\n    )\n}\n}\n\n// subscripe to store\nconst mapStateToProps = (state) =>{\n    return{\n        state: state\n    }\n}\n\n// actions\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      addToDisplay: (payload) => { dispatch({ type: 'ADD_TO_DISPLAY', payload: payload}) },\n      darsad: (payload) => { dispatch({ type: 'DARSAD', payload: payload}) },\n      clear: () => { dispatch({type: \"CLEAR\"})},\n      clear2: () => { dispatch({type: \"CLEAR2\"})},\n      sum: (payload) => { dispatch({type: \"SUM\", payload: payload})},\n      result: () => { dispatch({type: \"RESULT\"})},\n      minus: (payload) => { dispatch({type: \"MINUS\", payload: payload})},\n      multiply: (payload) => { dispatch({type: \"MULTIPLY\",  payload: payload})},\n      divide: (payload) => { dispatch({type: \"DIVIDE\",  payload: payload})}\n    }\n  }\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Pad)","import React, { Component } from 'react'\nimport Display from './Display'\nimport Pad from './Pad'\n\nexport default class Calculator extends Component {\n    render() {\n        return (\n            <div className=\"calculator\">                \n            <Display />\n            <Pad />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">simpleReactCalculator</h1>\n      <Calculator />\n      <p className=\"sign\">by <a href=\"https://alirezainjast.ir\">alirezainjast</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    display: 0,\n    tmpNum: 0,\n    operation: ''\n}\n\nconst Counter = (state = initState, { type, payload }) => {\n    let tmpState = state;\n\n    switch (type) {\n\n    case 'ADD_TO_DISPLAY':\n        if(payload === '.'){\n            payload = state.display+payload\n            return { ...state, display: payload }\n        }\n        else{\n            payload = parseFloat(state.display+payload)\n            return { ...state, display: payload }\n        }\n    case 'DARSAD':\n        return { ...state, display: tmpState.display/100}\n    case 'CLEAR':\n        return { display: 0, tmpNum: 0 }\n    case 'CLEAR2':\n        return { ...state, display: 0 }\n\n    case 'SUM':\n    case \"MINUS\":\n    case \"MULTIPLY\":\n    case \"DIVIDE\":\n        return { ...state, tmpNum: tmpState.display, display: 0, operation: payload }\n\n    case \"RESULT\":\n        switch(state.operation){\n            case '+':\n                return { display: tmpState.tmpNum + tmpState.display, tmpNum: 0 }\n            case '-':\n                return { display: tmpState.tmpNum - tmpState.display, tmpNum: 0 }\n            case 'X':\n                return { display: tmpState.tmpNum * tmpState.display, tmpNum: 0 }\n            case '/':\n                return { display: tmpState.tmpNum / tmpState.display, tmpNum: 0 }\n            default:\n                return state\n        }\n    default:\n        return state\n    }\n}\n\nexport default Counter","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport Counter from './Counter'\n\nlet store = createStore(Counter);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}